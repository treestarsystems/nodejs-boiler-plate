#!/bin/bash
#Purpose: Base system is already established and you just want to start a new web project with no backend.
#Status: Incomplete
scriptDir=$(echo "$PWD")
gitHubAuthorName='Tree Star Systems'
gitHubAuthorEmail='info@treestarsystems.com'
projectName=''
systemId=''
baseDir='/opt'
projectDescription=''
regExValidVisibility='(^|\s)\Kpublic(?=\s|$)|(^|\s)\Kprivate(?=\s|$)|(^|\s)\Kinternal(?=\s|$)'

#Pass the desired length of the random string as a number. Ex: genrandom 5
function genrandom {
 date +%s | sha256sum | base64 | head -c $1 ; echo
}

function do_system_dependencies {
 echo -e "Installing system dependencies..."
 sudo apt install -y software-properties-common aptitude
 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
 sudo apt-add-repository https://cli.github.com/packages
 sudo aptitude update
 sudo aptitude -y upgrade
}

function do_generate_readme {
 #Generate README
 echo -e "Generating README.md file..."
 echo -e "
# $projectName
Generated by [nodejs-boiler-plate](https://github.com/treestarsystems/nodejs-boiler-plate) script.  
## Description:  
$projectDescription  

## How to Run:
Place in a folder and configure your web server to serve the files.
 " > $baseDir/$projectName/README.md
}

function do_generate_nginx_conf {
 cp $scriptDir/static_files/ssl-params.conf /etc/nginx/snippets/ssl-params.conf
 echo -e "Generating Temporary Self Signed Certificate..."
 openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout $baseDir/$projectName/system_confs/certs/$systemId.key -out $baseDir/$projectName/system_confs/certs/$systemId.pem -subj "/C=US/ST=GA/L=City/O=Tree Star Systems, LLC./OU=DEV/CN=$systemId"
 cat $baseDir/$projectName/system_confs/certs/$systemId.key > $baseDir/$projectName/system_confs/certs/$systemId.mongo.pem
 cat $baseDir/$projectName/system_confs/certs/$systemId.pem >> $baseDir/$projectName/system_confs/certs/$systemId.mongo.pem
 chmod 600 $baseDir/$projectName/system_confs/certs/$systemId.mongo.pem
 echo -e "Generating Diffie-Hellman Group. Please be patient..."
 openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
 echo -e "Generating NGINX Configuration..."
 echo "
#HTTP to HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name $systemId;
    if (\$host = $systemId) {
        return 301 https://\$host\$request_uri;
    }
    if (\$host = $systemId) {
        return 301 https://\$host\$request_uri;
    }
}

#Host/Vhost/Alias conf
server {
     listen 443 ssl;
     listen [::]:443 ssl;
     ssl_certificate $baseDir/$projectName/system_confs/certs/$systemId.pem;
     ssl_certificate_key $baseDir/$projectName/system_confs/certs/$systemId.key;
     server_name $systemId;
     proxy_set_header Host \$host;
     proxy_set_header X-Forwarded-Proto \$scheme;
     proxy_set_header X-Real-IP \$remote_addr;
     proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
     location / {
             proxy_pass http://127.0.0.1:$appProdPort/;
             proxy_http_version 1.1;
             proxy_set_header Upgrade \$http_upgrade;
             proxy_set_header Connection 'upgrade';
             proxy_set_header Host \$host;
             proxy_cache_bypass \$http_upgrade;
     }

     location /public/ {
             root $baseDir/$projectName/server/view;
             access_log off;
             expires max;
     }
     include snippets/ssl-params.conf;
}
 " > /etc/nginx/sites-enabled/default-$projectName
 nginx -t &>/dev/null
 nginxExitCode=$(echo $?)
 if [ "$nginxExitCode" == 0  ]
 then
  service nginx restart
 else
  echo -e "Issue with NGINX configuration. Please check using the \"nginx -t\" command..."
 fi
}

function do_generate_base_folders {
 echo -e "Generating base folders..."
 mkdir -p $baseDir/$projectName/{view/public/{js,css,images}}
}

function do_git {
 echo ""
 randomString=$(genrandom 5)
 authTokenFile=''
 #Run authentication procedure.
 #Prompt for authToken file
 read -e -p "Please enter the full path to your GitHub Auth Token file? (Press Enter to manually enter the Token String): " authTokenFile
 if [ ! -f "$authTokenFile" ]
 then
  #Prompt for authToken string
  read -e -s -p "Please enter your GitHub Auth Token? (Press Enter to Skip): " authTokenString
  if [ ! -z "$authTokenString" ]
  then
   authTokenFile='/tmp/authtoken-$randomString'
   echo "$authTokenString" > $authTokenFile
   gh auth login --with-token < $authTokenFile
   ghAuthLoginExitCode=$(echo "$?")
   if  [ ! $ghAuthLoginExitCode == 0 ]
   then
    echo -e "\nIncorrect entry or service not available. Please check: \nhttps://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\n"
   fi
  fi
  if [ -f "$authTokenFile" ]
  then
   rm $authTokenFile
  fi
 else
  gh auth login --with-token < $authTokenFile
  ghAuthLoginExitCode=$(echo "$?")
 # echo -e "Command Exit Code: $ghAuthLoginExitCode"
 fi
 #Repository visibility
 read -e -p "Repo Visibility? (public/private/internal|Default: public): " visibility
 #Default variable if blank
 if [ -z $visibility ]
 then
  visibility='public'
 fi
 #Validate the input and keep asking until it is correct.
 while [[ ! $(echo $visibility | grep -P $regExValidVisibility) == $visibility ]]
 do
  read -e -p "Enter A Valid Visibility String. (public/private/internal|Default: public): " visibility
  #Default variable if blank
  if [ $visibility == ""]
  then
   visibility='public'
  fi
 done

 cd $baseDir
 git init $projectName
 cd $baseDir/$projectName
 gitHubRepoURL=$(git config --get remote.origin.url)
 do_generate_base_folders
 do_generate_readme
 git config user.name "$gitHubAuthorName"
 git config user.email "$gitHubAuthorEmail"
 gh repo create $projectName --$visibility -y -d "$projectDescription"
 git remote add origin "$gitHubRepoURL"
 git add .
 git commit -a -m "initial commit for $projectName"
 git push $gitHubRepoString  --set-upstream origin master
}

function do_prompts {
 #Prompt for projectName
 read -e -p "Enter Project Name (Valid Chars: Letter,Numbers,-,_): " projectName
 #Validate the input and keep asking until it is correct.
 #Source: https://stackoverflow.com/a/49832505
 while [[ $projectName == "" ]] || [[ $projectName == "." ]] || [[ $projectName == ".." ]] || [ $(echo "${#projectName}") -gt 255 ] || [[ ! $projectName =~ ^[0-9a-zA-Z._-]+$ ]] || [[ ! $(echo $projectName | cut -c1-1) =~ ^[0-9a-zA-Z.]+$ ]]
 do
  read -e -p "Enter A Valid Project Name (Valid Chars: Letter,Numbers,-,_): " projectName
 done

 #Prompt for projectDescription
 read -e -p "Enter Project Description: " projectDescription

 #Prompt for installation's base directory
 read -e -p "Enter The Base Installation Directory (Ex: /opt|Default: /opt): " baseDirInput
 #Default variable if blank
 if [ "$baseDir" == "" ]
 then
  baseDir='/opt'
 fi
 #Validate the input and keep asking until it is correct.
 while [[ ! -d $baseDir ]]
 do
  read -e -p "Enter A Valid Directory (Ex: /opt): " baseDir
  #Default variable if blank
  if [ "$baseDir" == "" ]
  then
   baseDir='/opt'
  fi
 done

 do_system_dependencies
 do_git
 do_generate_nginx_conf
}

do_prompts
